Table users {
  id SERIAL [pk, increment]
  created_at TIMESTAMP
  updated_at TIMESTAMP
  username VARCHAR(30)
  bio varchar(400)
  avatar varchar(200)
  phone varchar(25)
  email varchar(40)
  password varchar(50)
  status varchar(15)
}

Table posts {
  id SERIAL [pk, increment]
  created_at TIMESTAMP
  updated_at TIMESTAMP
  url VARCHAR(200)
  user_id INTEGER [ref: > users.id]
}

Table comments {
  id SERIAL [pk, increment]
  created_at TIMESTAMP
  updated_at TIMESTAMP
  contents VARCHAR(240)
  user_id INTEGER [ref: > users.id]
  post_id INTEGER [ref: > posts.id]
}

Table likes {
  id SERIAL [pk, increment]
  created_at timestamp
  user_id INTEGER [ref: > users.id]
  comment_id INTEGER [ref: > comments.id]
  post_id INTEGER [ref: > posts.id]
}

Table photo_tags {
  id SERIAL [pk, increment]
  created_at timestamp
  updated_at timestamp
  post_id INTEGER [ref: > posts.id]
  user_id INTEGER [ref: > users.id]
  x integer
  y integer
}

Table caption_tags {
  id SERIAL [pk, increment]
  created_at timestamp
  updated_at timestamp
  post_id INTEGER [ref: > posts.id]
  user_id INTEGER [ref: > users.id]
}

// In this case, I don't think that we would ever have an updated at Flag if we ever have a hash tag with
// a different title.
// So let's say happy and we want to turn that into Happy Birthday.
// That really implies that we're just going to create a new hashtag rather than try to change an existing
// one.

Table hashtags {
  id serial [pk, increment]
  created_at TIMESTAMP
  title varchar(20)
}

Table hashtags_posts {
  id serial [pk, increment]
  hashtag_id integer [ref: > hashtags.id]
  post_id integer [ref: > posts.id]
}

Table followers {
  id serial [pk, increment]
  created_at timestamp
  leader_id integer [ref: > users.id]
  follower_id integer [ref: > users.id]
}